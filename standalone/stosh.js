"use strict";var stosh=(()=>{var M=Object.defineProperty;var G=Object.getOwnPropertyDescriptor;var Y=Object.getOwnPropertyNames;var z=Object.prototype.hasOwnProperty;var L=(c,e)=>{for(var t in e)M(c,t,{get:e[t],enumerable:!0})},K=(c,e,t,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let o of Y(e))!z.call(c,o)&&o!==t&&M(c,o,{get:()=>e[o],enumerable:!(r=G(e,o))||r.enumerable});return c};var q=c=>K(M({},"__esModule",{value:!0}),c);var H={};L(H,{Stosh:()=>E,stosh:()=>C});var m=class{constructor(){this.store=new Map}get length(){return this.store.size}clear(){this.store.clear()}getItem(e){return this.store.get(e)??null}key(e){return Array.from(this.store.keys())[e]??null}removeItem(e){this.store.delete(e)}setItem(e,t){this.store.set(e,t)}},h=class{get length(){return document.cookie?document.cookie.split(";").length:0}clear(){document.cookie.split(";").map(e=>e.trim().split("=")[0]).filter(Boolean).forEach(e=>this.removeItem(decodeURIComponent(e)))}getItem(e){let t=encodeURIComponent(e)+"=";return document.cookie.split(";").map(r=>r.trim()).find(r=>r.startsWith(t))?.slice(t.length)?decodeURIComponent(document.cookie.split(";").map(r=>r.trim()).find(r=>r.startsWith(t)).slice(t.length)):null}key(e){let t=document.cookie.split(";");if(e<0||e>=t.length)return null;let[r]=t[e].split("=");return r?decodeURIComponent(r.trim()):null}removeItem(e,t){document.cookie=k(e,"",{...t,expire:"Thu, 01 Jan 1970 00:00:00 GMT"})}setItem(e,t,r){document.cookie=k(e,t,r)}};function k(c,e,t){let r=[`${encodeURIComponent(c)}=${encodeURIComponent(e)}`,`path=${t?.path??"/"}`];if(t?.domain&&r.push(`domain=${t.domain}`),t?.expire){let o=typeof t.expire=="string"?t.expire:typeof t.expire=="number"?new Date(Date.now()+t.expire).toUTCString():t.expire.toUTCString();r.push(`expires=${o}`)}return t?.secure&&r.push("secure"),t?.sameSite&&r.push(`samesite=${t.sameSite}`),r.join("; ")}var O=class{constructor(e){if(typeof indexedDB>"u"||typeof indexedDB.open!="function")throw new Error("IndexedDB is not supported or 'open' method is missing in this environment.");this.dbName=`stoshDB_${e}`,this.storeName="stosh_store",this.dbPromise=this.open()}getStoreName(){return this.storeName}getDbPromise(){return this.dbPromise}open(){return new Promise((e,t)=>{try{if(typeof indexedDB>"u"||typeof indexedDB.open!="function")return t(new Error("IndexedDB became unavailable or invalid before open call."));let r=indexedDB.open(this.dbName,1);r.onupgradeneeded=o=>{let s=o.target.result;s.objectStoreNames.contains(this.storeName)||s.createObjectStore(this.storeName)},r.onsuccess=o=>{e(o.target.result)},r.onerror=o=>{console.error("[stosh] IndexedDB open request error:",o.target.error),t(o.target.error)}}catch(r){console.error("[stosh] Critical error calling indexedDB.open:",r),t(r)}})}async getItem(e){let t=await this.dbPromise;return new Promise((r,o)=>{let n=t.transaction(this.storeName,"readonly").objectStore(this.storeName).get(e);n.onsuccess=()=>r(n.result??null),n.onerror=()=>o(new Error("IndexedDB getItem error: "+n.error))})}async setItem(e,t){let r=await this.dbPromise;return new Promise((o,s)=>{let l=r.transaction(this.storeName,"readwrite").objectStore(this.storeName).put(t,e);l.onsuccess=()=>o(),l.onerror=()=>s(new Error("IndexedDB setItem error: "+l.error))})}async removeItem(e){let t=await this.dbPromise;return new Promise((r,o)=>{let n=t.transaction(this.storeName,"readwrite").objectStore(this.storeName).delete(e);n.onsuccess=()=>r(),n.onerror=()=>o(new Error("IndexedDB removeItem error: "+n.error))})}async clear(){let e=await this.dbPromise;return new Promise((t,r)=>{let o=e.transaction(this.storeName,"readwrite"),i=o.objectStore(this.storeName).clear();i.onsuccess=()=>t(),i.onerror=()=>r(i.error),o.oncomplete=()=>t(),o.onerror=()=>r(o.error),o.onabort=()=>r(o.error||new Error("Transaction aborted"))})}async getAllKeys(){let e=await this.dbPromise;return new Promise((t,r)=>{let i=e.transaction(this.storeName,"readonly").objectStore(this.storeName).getAllKeys();i.onsuccess=()=>t(i.result),i.onerror=()=>r(i.error)})}async batchSet(e){if(!e.length)return;let t=await this.dbPromise;return new Promise((r,o)=>{let s=t.transaction(this.storeName,"readwrite"),i=s.objectStore(this.storeName),n=e.length;e.forEach(({key:l,value:d})=>{let a=i.put(d,l);a.onsuccess=()=>{n--},a.onerror=()=>{s.error||(o(a.error),s.abort())}}),s.oncomplete=()=>r(),s.onerror=()=>o(s.error),s.onabort=()=>o(s.error||new Error("Transaction aborted"))})}async batchGet(e){if(!e.length)return[];let t=await this.dbPromise;return new Promise((r,o)=>{let s=t.transaction(this.storeName,"readonly"),i=s.objectStore(this.storeName),n=new Array(e.length).fill(null),l=new Map;e.forEach((a,p)=>{l.has(a)||l.set(a,[]),l.get(a).push(p)});let d=l.size;if(d===0){r(n);return}l.forEach((a,p)=>{let b=i.get(p);b.onsuccess=()=>{a.forEach(v=>n[v]=b.result??null),d--},b.onerror=()=>{s.error||o(b.error)}}),s.oncomplete=()=>r(n),s.onerror=()=>o(s.error),s.onabort=()=>o(s.error||new Error("Transaction aborted"))})}async batchRemove(e){if(!e.length)return;let t=await this.dbPromise;return new Promise((r,o)=>{let s=t.transaction(this.storeName,"readwrite"),i=s.objectStore(this.storeName),n=e.length;e.forEach(l=>{let d=i.delete(l);d.onsuccess=()=>{n--},d.onerror=()=>{s.error||(o(d.error),s.abort())}}),s.oncomplete=()=>r(),s.onerror=()=>o(s.error),s.onabort=()=>o(s.error||new Error("Transaction aborted"))})}};var y="idb",S="local",w="session",f="cookie",u="memory",x=[y,S,w,f,u],A=[S,w,f,u],I="get",D="set",_="remove";function B(c,e,t){let r=-1;function o(s){if(s<=r)throw new Error("next() called multiple times");r=s;let i=c[s]||t;if(i)return Promise.resolve(i(e,()=>o(s+1)))}return o(0)}function F(c,e,t){let r=-1;function o(s){if(s<=r)throw new Error("next() called multiple times");r=s;let i=c[s]||t;i&&i(e,()=>o(s+1))}o(0)}function T(c,e){return c.startsWith(e)?c.slice(e.length):c}function P(c,e){return Array.from({length:c.length}).map((t,r)=>c.key(r)).filter(t=>!!t&&t.startsWith(e))}function W(c){try{let e="__stosh_test_key__"+Math.random();return c.setItem(e,"1"),c.removeItem(e),!0}catch{return!1}}function N(c){for(let e of c){let t=null;if(e===S?t=typeof window<"u"?window.localStorage:null:e===w?t=typeof window<"u"?window.sessionStorage:null:e===f?t=typeof window<"u"?new h:null:e===u&&(t=new m),t&&W(t))return t}return new m}function R(c,e){return{...c||{},...e||{}}}var E=class c{constructor(e){this.middleware={get:[],set:[],remove:[]};let t=null,r=!1,o=[y,S,w,f,u];if(e?.type&&!o.includes(e.type))throw new Error(`Unsupported storage type: ${e.type}`);let s=e?.type&&e.type!==y?!0:e?.priority?e.priority.every(n=>n!==y):!1,i=e?.priority||(e?.type?[e.type]:s?A:x);if(c.isSSR){r=!0,this.storage=new m,this.isMemoryFallback=!0,this.namespace=e?.namespace?e.namespace+":":"",this.strictSyncFallback=e?.strictSyncFallback??!1,this.serializeFn=e?.serialize||JSON.stringify,this.deserializeFn=e?.deserialize||JSON.parse,this.middleware={get:[],set:[],remove:[]};return}for(let n of i)try{if(n===y&&!s){this.idbStorage=new O(e?.namespace||"stosh_default");let l=i.filter(d=>d!==y);t=N(l);break}else n===S?t=window.localStorage:n===w?t=window.sessionStorage:n===f?t=new h:n===u&&(t=new m);if(t&&n!==u&&n!==y){let l="__stosh_test_key__"+Math.random();t.setItem(l,"1"),t.removeItem(l)}if(t){r=n===u;break}}catch{t=null;continue}t||(t=new m,r=!0),this.storage=t,this.isMemoryFallback=r,this.namespace=e?.namespace?e.namespace+":":"",this.strictSyncFallback=e?.strictSyncFallback??!1,this.serializeFn=e?.serialize||JSON.stringify,this.deserializeFn=e?.deserialize||JSON.parse,this.middleware={get:[],set:[],remove:[]},!c.isSSR&&window.addEventListener&&(this.storage===window.localStorage||this.storage===window.sessionStorage)&&window.addEventListener("storage",n=>{if(n.key&&n.key.startsWith(this.namespace)&&this.onChangeCb){let l=T(n.key,this.namespace),d=null;if(n.newValue)try{let a=this.deserializeFn(n.newValue);(!a.e||Date.now()<=a.e)&&(d=a.v)}catch(a){console.error("[stosh] Failed to deserialize storage event value:",a)}this.triggerChange(l,d)}})}static get isSSR(){return typeof window>"u"}use(e,t){this.middleware[e].push(t)}async runMiddleware(e,t,r){t.isSync=!1,await B(this.middleware[e],t,r)}runMiddlewareSync(e,t,r){t.isSync=!0,F(this.middleware[e],t,r)}async _getInternal(e){let t={key:e},r=null;return await this.runMiddleware(I,t,async o=>{let s=this.namespace+o.key,i=null;if(this.idbStorage?i=await this.idbStorage.getItem(s):i=this.storage.getItem(s),!i)r=null;else try{let n=this.deserializeFn(i);n.e&&Date.now()>n.e?(this.idbStorage?this.idbStorage.removeItem(s).catch(console.error):this.storage.removeItem(s),r=null):r=n.v}catch(n){console.error("[stosh] Failed to deserialize storage value:",n),r=null}o.result=r}),t.result===void 0?null:t.result}_getInternalSync(e){let t={key:e},r=null;return this.runMiddlewareSync(I,t,o=>{let s=this.namespace+o.key,i=this.storage.getItem(s);if(!i)r=null;else try{let n=this.deserializeFn(i);n.e&&Date.now()>n.e?(this.storage.removeItem(s),r=null):r=n.v}catch(n){console.error("[stosh] Failed to deserialize storage value:",n),r=null}o.result=r}),t.result===void 0?null:t.result}async _setInternal(e,t,r){let o={key:e,value:t,options:r};await this.runMiddleware(D,o,async s=>{if(s.value===void 0){await this._removeInternal(s.key);return}let i={v:s.value,e:s.options?.expire?Date.now()+s.options.expire:void 0},n=this.serializeFn(i),l=this.namespace+s.key;this.storage instanceof h?this.storage.setItem(l,n,s.options):this.idbStorage?await this.idbStorage.setItem(l,n):this.storage.setItem(l,n),this.triggerChange(s.key,s.value)})}_setInternalSync(e,t,r){let o={key:e,value:t,options:r};this.runMiddlewareSync(D,o,s=>{if(s.value===void 0){this._removeInternalSync(s.key);return}let i={v:s.value,e:s.options?.expire?Date.now()+s.options.expire:void 0},n=this.namespace+s.key,l=this.serializeFn(i);this.storage instanceof h?this.storage.setItem(n,l,s.options):this.storage.setItem(n,l),this.triggerChange(s.key,s.value)})}async _removeInternal(e,t){let r={key:e,options:t};await this.runMiddleware(_,r,async o=>{let s=this.namespace+o.key;this.storage instanceof h?this.storage.removeItem(s,o.options):this.idbStorage?await this.idbStorage.removeItem(s):this.storage.removeItem(s),this.triggerChange(o.key,null)})}_removeInternalSync(e,t){let r={key:e,options:t};this.runMiddlewareSync(_,r,o=>{let s=this.namespace+o.key;this.storage instanceof h?this.storage.removeItem(s,o.options):this.storage.removeItem(s),this.triggerChange(o.key,null)})}async set(e,t,r){if(this.idbStorage)await this._setInternal(e,t,r);else return Promise.resolve().then(()=>this._setInternalSync(e,t,r))}async get(e){return this.idbStorage?this._getInternal(e):Promise.resolve().then(()=>this._getInternalSync(e))}async remove(e,t){if(this.idbStorage)await this._removeInternal(e,t);else return Promise.resolve().then(()=>this._removeInternalSync(e,t))}setSync(e,t,r){if(this.idbStorage&&this.strictSyncFallback)throw new Error("[stosh] setSync is not supported with IndexedDB storage.");this.idbStorage&&console.warn("[stosh] setSync called when IndexedDB is the primary storage. Operation will use the synchronous fallback storage (e.g., localStorage, memory)."),this._setInternalSync(e,t,r)}getSync(e){if(this.idbStorage&&this.strictSyncFallback)throw new Error("[stosh] getSync is not supported with IndexedDB storage.");return this.idbStorage&&console.warn("[stosh] getSync called when IndexedDB is the primary storage. Operation will use the synchronous fallback storage (e.g., localStorage, memory)."),this._getInternalSync(e)}removeSync(e,t){if(this.idbStorage&&this.strictSyncFallback)throw new Error("[stosh] removeSync is not supported with IndexedDB storage.");this.idbStorage&&console.warn("[stosh] removeSync called when IndexedDB is the primary storage. Operation will use the synchronous fallback storage (e.g., localStorage, memory)."),this._removeInternalSync(e,t)}clearSync(){if(this.idbStorage){if(this.strictSyncFallback)throw new Error("[stosh] clearSync is not supported with IndexedDB storage.");console.warn("[stosh] clearSync called when IndexedDB is the primary storage. Operation will use the synchronous fallback storage (e.g., localStorage, memory).")}P(this.storage,this.namespace).forEach(t=>{this._removeInternalSync(T(t,this.namespace))})}async clear(){if(this.idbStorage){let e=(await this.idbStorage.getAllKeys()).filter(t=>t.startsWith(this.namespace)).map(t=>T(t,this.namespace));await this.idbStorage.clear(),e.forEach(t=>this.triggerChange(t,null));return}return Promise.resolve().then(()=>this.clearSync())}async has(e){return await this.get(e)!==null}hasSync(e){if(this.idbStorage){if(this.strictSyncFallback)throw new Error("[stosh] hasSync is not supported with IndexedDB storage.");console.warn("[stosh] hasSync called when IndexedDB is the primary storage. Operation will use the synchronous fallback storage (e.g., localStorage, memory).")}return this.getSync(e)!==null}async getAll(){if(this.idbStorage){let e=await this.idbStorage.getDbPromise();return new Promise((t,r)=>{let o=e.transaction(this.idbStorage.getStoreName(),"readonly"),i=o.objectStore(this.idbStorage.getStoreName()).openCursor(),n={};i.onsuccess=async l=>{let d=l.target.result;if(d){let a=d.key;if(a.startsWith(this.namespace)){let p=T(a,this.namespace),b=d.value,v=null;try{let g=this.deserializeFn(b);g.e&&Date.now()>g.e?(this.idbStorage.removeItem(a).catch(console.error),v=null):v=g.v}catch(g){console.error("[stosh] Failed to deserialize storage value:",g),v=null}let U={key:p,result:v};await this.runMiddleware(I,U,async g=>{g.result!==null&&g.result!==void 0&&(n[p]=g.result)})}d.continue()}else t(n)},i.onerror=()=>r(i.error),o.onerror=()=>r(o.error)})}return Promise.resolve().then(()=>this.getAllSync())}getAllSync(){if(this.idbStorage){if(this.strictSyncFallback)throw new Error("[stosh] getAllSync is not supported with IndexedDB storage.");console.warn("[stosh] getAllSync called when IndexedDB is the primary storage. Operation will use the synchronous fallback storage (e.g., localStorage, memory).")}let e={};return P(this.storage,this.namespace).forEach(r=>{let o=T(r,this.namespace),s=this._getInternalSync(o);s!==null&&(e[o]=s)}),e}async batchSet(e,t){if(this.idbStorage){let r=[];for(let{key:s,value:i,options:n}of e){let l=R(t,n),d={key:s,value:i,options:l};await this.runMiddleware(D,d,async a=>{if(a.value===void 0)this.triggerChange(a.key,null);else{let p={v:a.value,e:a.options?.expire?Date.now()+a.options.expire:void 0};r.push({key:this.namespace+a.key,value:this.serializeFn(p)}),this.triggerChange(a.key,a.value)}})}r.length>0&&await this.idbStorage.batchSet(r);let o=e.filter(s=>s.value===void 0).map(s=>this.namespace+s.key);o.length>0&&await this.idbStorage.batchRemove(o);return}return Promise.resolve().then(()=>this.batchSetSync(e,t))}batchSetSync(e,t){if(this.idbStorage){if(this.strictSyncFallback)throw new Error("[stosh] batchSetSync is not supported with IndexedDB storage.");console.warn("[stosh] batchSetSync called when IndexedDB is the primary storage. Operation will use the synchronous fallback storage (e.g., localStorage, memory).")}e.forEach(({key:r,value:o,options:s})=>{let i=R(t,s);this._setInternalSync(r,o,i)})}async batchGet(e){if(this.idbStorage){let t=e.map(s=>this.namespace+s),r=await this.idbStorage.batchGet(t),o=new Array(e.length).fill(null);for(let s=0;s<e.length;s++){let i=e[s],n=r[s],l=null;if(n)try{let a=this.deserializeFn(n);a.e&&Date.now()>a.e?(this.idbStorage.removeItem(t[s]).catch(console.error),l=null):l=a.v}catch(a){console.error("[stosh] Failed to deserialize storage value:",a),l=null}let d={key:i,result:l};await this.runMiddleware(I,d,async a=>{o[s]=a.result===void 0?null:a.result})}return o}return Promise.resolve().then(()=>this.batchGetSync(e))}batchGetSync(e){if(this.idbStorage){if(this.strictSyncFallback)throw new Error("[stosh] batchGetSync is not supported with IndexedDB storage.");console.warn("[stosh] batchGetSync called when IndexedDB is the primary storage. Operation will use the synchronous fallback storage (e.g., localStorage, memory).")}return e.map(t=>this._getInternalSync(t))}async batchRemove(e,t){if(this.idbStorage){let r=[];for(let o of e){let s={key:o,options:t};await this.runMiddleware(_,s,async i=>{r.push(this.namespace+i.key),this.triggerChange(i.key,null)})}r.length>0&&await this.idbStorage.batchRemove(r);return}return Promise.resolve().then(()=>this.batchRemoveSync(e,t))}batchRemoveSync(e,t){if(this.idbStorage){if(this.strictSyncFallback)throw new Error("[stosh] batchRemoveSync is not supported with IndexedDB storage.");console.warn("[stosh] batchRemoveSync called when IndexedDB is the primary storage. Operation will use the synchronous fallback storage (e.g., localStorage, memory).")}e.forEach(r=>{this._removeInternalSync(r,t)})}onChange(e){return this.onChangeCb=e,()=>{this.onChangeCb=void 0}}triggerChange(e,t){if(this.onChangeCb)try{let r=this.onChangeCb(e,t);r instanceof Promise&&r.catch(o=>console.error("[stosh] Error in onChange callback:",o))}catch(r){console.error("[stosh] Error in onChange callback:",r)}}};function C(c){return new E(c)}C.isSSR=E.isSSR;return q(H);})();
